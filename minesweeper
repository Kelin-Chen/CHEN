#include<iostream>
#include<vector>
using namespace std;
int row, column;
int counts(int i, int j, vector<vector<bool>>arr);
vector<vector<int>>getcounts(vector<vector<bool>>& boolarry);
void main()
{

	cin >> row >> column;
	vector<vector<bool>>boolarry;
	vector<bool>v;
	srand(time(NULL));
	for (int i = 0; i < row; i++)
	{
		v.clear();
		for (int j = 0; j < column; j++)
		{
			v.push_back(rand() % 2);
		}
		boolarry.push_back(v);
	}
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < column; j++)
		{
			cout << boolarry[i][j] << '\t';
		}
		cout << endl<<endl;
	}
	vector<vector<int>>intarry=getcounts(boolarry);
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < column; j++)
		{
			cout << intarry[i][j] << '\t';
		}
		cout << endl << endl;
	}

}


int counts(int i, int j, vector<vector<bool>>arr)
{
	int count = 0;
	for (int p = i-1; p <= i + 1; p++)
	{
		if (p < 0 || p > row - 1)continue;
		for (int q = j-1; q <= j + 1; q++)
		{
			if (q < 0 || q > column - 1)continue;
			if (arr[p][q] == 1)count++;
        }
	}
	return count;
}
vector<vector<int>>getcounts(vector<vector<bool>>& boolarry)
{
	vector<vector<int>>intarry;
	vector<int>v1;
	for (int i = 0; i < row; i++)
	{
		v1.clear();
		for (int j = 0; j < column; j++)
		{
			v1.push_back(counts(i, j, boolarry));
		}
		intarry.push_back(v1);
	}
	return intarry;
}
